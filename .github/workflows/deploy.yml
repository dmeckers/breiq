name: Deploy to AWS ECS (Simple)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [closed]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: breiq-backend
  ECS_SERVICE: breiq-production-backend
  ECS_CLUSTER: breiq-production-cluster

jobs:
  deploy:
    name: Deploy Laravel API
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
    - name: 🚀 Notify Deployment Start
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          🚀 **AWS ECS Deployment Started**

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: `${{ github.sha }}`
          Author: ${{ github.actor }}
          
          ⏳ Starting AWS deployment process...

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.SUBMODULE_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create .env.production from secrets
      run: |
        cd breiq-backend
        cat > .env.production << 'EOF'
        # Application
        APP_NAME="Breiq API"
        APP_ENV=production
        APP_KEY=${{ secrets.APP_KEY }}
        APP_DEBUG=false
        APP_TIMEZONE=UTC
        APP_URL=${{ secrets.APP_URL }}

        # Database - AWS RDS PostgreSQL
        DB_CONNECTION=pgsql
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=5432
        DB_DATABASE=breiq_production
        DB_USERNAME=breiq_admin
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        # Cache & Sessions - AWS ElastiCache Redis
        CACHE_STORE=redis
        SESSION_DRIVER=redis
        REDIS_CLIENT=phpredis
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PASSWORD=
        REDIS_PORT=6379
        REDIS_PREFIX=breiq_production_cache_

        # Queue - AWS SQS
        QUEUE_CONNECTION=sqs
        SQS_PREFIX=https://sqs.us-east-1.amazonaws.com/${{ secrets.AWS_ACCOUNT_ID }}
        SQS_QUEUE=breiq-production-queue
        SQS_SUFFIX=

        # File Storage - AWS S3
        FILESYSTEM_DISK=s3
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION=us-east-1
        AWS_BUCKET=breiq-production-videos
        AWS_URL=
        AWS_ENDPOINT=
        AWS_USE_PATH_STYLE_ENDPOINT=false

        # Logging
        LOG_CHANNEL=errorlog
        LOG_STACK=single
        LOG_LEVEL=error

        # Google OAuth
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REDIRECT_URI="${APP_URL}/auth/google/callback"

        # Firebase Cloud Messaging
        FCM_SERVER_KEY=${{ secrets.FCM_SERVER_KEY }}
        FCM_SENDER_ID=${{ secrets.FCM_SENDER_ID }}

        # Video Processing Configuration
        MAX_VIDEO_SIZE_MB=100
        MAX_VIDEO_DURATION_SECONDS=300
        SUPPORTED_VIDEO_FORMATS=mp4,mov,avi,wmv

        # Production Security Settings
        SANCTUM_STATEFUL_DOMAINS=breiq.online,api.breiq.online
        SESSION_DOMAIN=.breiq.online
        CORS_ALLOWED_ORIGINS="https://breiq.online,app://breiq"
        EOF

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd breiq-backend
        
        # Create simple Dockerfile
        cat > Dockerfile << 'EOF'
        FROM webdevops/php-nginx:8.2-alpine

        # Set document root for Laravel
        ENV WEB_DOCUMENT_ROOT=/app/public

        # Set working directory
        WORKDIR /app

        # Copy application files
        COPY --chown=application:application . /app

        # Install composer dependencies
        RUN composer install --no-dev --optimize-autoloader --no-interaction

        # Laravel optimizations
        RUN php artisan config:cache || true && \
            php artisan route:cache || true && \
            php artisan view:cache || true

        EXPOSE 80
        EOF

        # Build and push
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Get deployment info
      id: deployment-info
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names breiq-production-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
        echo "🚀 Deployment completed successfully!"
        echo "API Endpoint: http://$ALB_DNS/api/health"

    - name: ✅ Notify Deployment Success
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ✅ **AWS ECS Deployment Successful!**

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: `${{ github.sha }}`
          Author: ${{ github.actor }}

          🎉 Laravel API deployed successfully to AWS!
          
          🌐 **Live Endpoints:**
          • API Health: http://${{ steps.deployment-info.outputs.alb_dns }}/api/health
          • API Base: http://${{ steps.deployment-info.outputs.alb_dns }}/api/
          
          🐳 **Container Details:**
          • Image: ${{ steps.build-image.outputs.image }}
          • Cluster: ${{ env.ECS_CLUSTER }}
          • Service: ${{ env.ECS_SERVICE }}

    - name: ❌ Notify Deployment Failure  
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ❌ **AWS ECS Deployment Failed!**

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: `${{ github.sha }}`
          Author: ${{ github.actor }}

          💥 Deployment failed during AWS execution
          
          🔗 Check the GitHub Actions logs for details:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}