name: Deploy to AWS ECS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [closed]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: breiq-backend
  ECS_SERVICE: breiq-production-backend
  ECS_CLUSTER: breiq-production-cluster

jobs:
  deploy:
    name: Deploy Laravel API
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
    - name: 🚀 Notify Deployment Start
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          🚀 **AWS ECS Deployment Started**

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: `${{ github.sha }}`
          Author: ${{ github.actor }}
          
          📋 Deployment Steps:
          🔧 Building Docker image from GitHub source
          ☁️ Pushing to AWS ECR registry
          🚀 Deploying to ECS Fargate cluster
          🗄️ Running database migrations automatically
          
          ⏳ Starting AWS deployment process...

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Navigate to Laravel backend directory
        cd breiq-backend
        
        # Create production Dockerfile
        cat > Dockerfile << 'EOF'
        FROM php:8.2-fpm-alpine

        # Install system dependencies
        RUN apk add --no-cache \
            git \
            curl \
            libpng-dev \
            oniguruma-dev \
            libxml2-dev \
            zip \
            unzip \
            postgresql-dev \
            redis \
            supervisor \
            nginx \
            bash

        # Install PHP extensions
        RUN docker-php-ext-install pdo pdo_pgsql mbstring exif pcntl bcmath gd

        # Get latest Composer
        COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

        # Set working directory
        WORKDIR /var/www

        # Copy application files
        COPY . /var/www
        COPY --chown=www-data:www-data . /var/www

        # Install dependencies
        RUN composer install --no-dev --optimize-autoloader --no-scripts

        # Generate optimized class loader
        RUN composer dump-autoload --optimize --no-scripts

        # Copy environment file
        COPY .env.production /var/www/.env

        # Create startup script using echo commands
        RUN echo '#!/bin/bash' > /var/www/startup.sh && \
            echo 'set -e' >> /var/www/startup.sh && \
            echo '' >> /var/www/startup.sh && \
            echo 'echo "Starting Breiq Laravel API..."' >> /var/www/startup.sh && \
            echo 'cd /var/www' >> /var/www/startup.sh && \
            echo '' >> /var/www/startup.sh && \
            echo '# Wait for database to be ready' >> /var/www/startup.sh && \
            echo 'echo "Waiting for database connection..."' >> /var/www/startup.sh && \
            echo 'until php artisan migrate:status > /dev/null 2>&1; do' >> /var/www/startup.sh && \
            echo '    echo "Database not ready, waiting 5 seconds..."' >> /var/www/startup.sh && \
            echo '    sleep 5' >> /var/www/startup.sh && \
            echo 'done' >> /var/www/startup.sh && \
            echo '' >> /var/www/startup.sh && \
            echo '# Run database migrations' >> /var/www/startup.sh && \
            echo 'echo "Running database migrations..."' >> /var/www/startup.sh && \
            echo 'php artisan migrate --force' >> /var/www/startup.sh && \
            echo '' >> /var/www/startup.sh && \
            echo '# Laravel optimization commands' >> /var/www/startup.sh && \
            echo 'echo "Running Laravel optimization..."' >> /var/www/startup.sh && \
            echo 'php artisan config:cache --ansi || echo "Config cache failed"' >> /var/www/startup.sh && \
            echo 'php artisan route:cache --ansi || echo "Route cache failed"' >> /var/www/startup.sh && \
            echo 'php artisan view:cache --ansi || echo "View cache failed"' >> /var/www/startup.sh && \
            echo '' >> /var/www/startup.sh && \
            echo 'echo "Laravel initialization complete"' >> /var/www/startup.sh && \
            echo 'exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' >> /var/www/startup.sh && \
            chmod +x /var/www/startup.sh

        # Configure Nginx
        RUN echo 'events {' > /etc/nginx/nginx.conf && \
            echo '    worker_connections 1024;' >> /etc/nginx/nginx.conf && \
            echo '}' >> /etc/nginx/nginx.conf && \
            echo '' >> /etc/nginx/nginx.conf && \
            echo 'http {' >> /etc/nginx/nginx.conf && \
            echo '    include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
            echo '    default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
            echo '    ' >> /etc/nginx/nginx.conf && \
            echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
            echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
            echo '    ' >> /etc/nginx/nginx.conf && \
            echo '    server {' >> /etc/nginx/nginx.conf && \
            echo '        listen 80;' >> /etc/nginx/nginx.conf && \
            echo '        index index.php index.html;' >> /etc/nginx/nginx.conf && \
            echo '        root /var/www/public;' >> /etc/nginx/nginx.conf && \
            echo '' >> /etc/nginx/nginx.conf && \
            echo '        location / {' >> /etc/nginx/nginx.conf && \
            echo '            try_files $uri $uri/ /index.php?$query_string;' >> /etc/nginx/nginx.conf && \
            echo '        }' >> /etc/nginx/nginx.conf && \
            echo '' >> /etc/nginx/nginx.conf && \
            echo '        location ~ \.php$ {' >> /etc/nginx/nginx.conf && \
            echo '            fastcgi_pass 127.0.0.1:9000;' >> /etc/nginx/nginx.conf && \
            echo '            fastcgi_index index.php;' >> /etc/nginx/nginx.conf && \
            echo '            include fastcgi_params;' >> /etc/nginx/nginx.conf && \
            echo '            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;' >> /etc/nginx/nginx.conf && \
            echo '        }' >> /etc/nginx/nginx.conf && \
            echo '' >> /etc/nginx/nginx.conf && \
            echo '        location ~ /\.ht {' >> /etc/nginx/nginx.conf && \
            echo '            deny all;' >> /etc/nginx/nginx.conf && \
            echo '        }' >> /etc/nginx/nginx.conf && \
            echo '    }' >> /etc/nginx/nginx.conf && \
            echo '}' >> /etc/nginx/nginx.conf

        # Configure Supervisor
        RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf && \
            echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo '[program:nginx]' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'command=nginx -g "daemon off;"' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'stderr_logfile=/var/log/nginx/error.log' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'stdout_logfile=/var/log/nginx/access.log' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo '[program:php-fpm]' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'command=php-fpm' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf

        # Configure PHP-FPM
        RUN echo "listen = 127.0.0.1:9000" >> /usr/local/etc/php-fpm.d/www.conf

        # Create nginx run directory
        RUN mkdir -p /var/run/nginx

        # Expose port 80
        EXPOSE 80

        # Start with our startup script
        CMD ["/var/www/startup.sh"]
        EOF

        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        # Force new deployment with latest image
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

        # Wait for deployment to complete
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Get deployment info
      id: deployment-info
      run: |
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names breiq-production-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
        echo "🚀 Deployment completed successfully!"
        echo "API Endpoint: http://$ALB_DNS/api/health"
        echo "Image: ${{ steps.build-image.outputs.image }}"

    - name: ✅ Notify Deployment Success
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ✅ **AWS ECS Deployment Successful!**

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: `${{ github.sha }}`
          Author: ${{ github.actor }}

          🎉 Laravel API deployed successfully to AWS!
          
          ✅ **Completed Steps:**
          🔧 Docker image built from GitHub source
          ☁️ Image pushed to AWS ECR
          🚀 Deployed to ECS Fargate cluster  
          🗄️ Database migrations executed
          ⚡ Service scaled and health checked
          
          🌐 **Live Endpoints:**
          • API Health: http://${{ steps.deployment-info.outputs.alb_dns }}/api/health
          • API Base: http://${{ steps.deployment-info.outputs.alb_dns }}/api/
          
          🐳 **Container Details:**
          • Image: ${{ steps.build-image.outputs.image }}
          • Cluster: ${{ env.ECS_CLUSTER }}
          • Service: ${{ env.ECS_SERVICE }}
          
          🕒 Deployment completed at: $(date)

    - name: ❌ Notify Deployment Failure  
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ❌ **AWS ECS Deployment Failed!**

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: `${{ github.sha }}`
          Author: ${{ github.actor }}

          💥 **Deployment failed during AWS execution**
          
          🔍 **Possible Issues:**
          • AWS credentials or permissions
          • Docker build or ECR push failure
          • ECS service deployment timeout
          • Database migration errors
          • Load balancer health check failure
          
          📋 **Troubleshooting Steps:**
          1. Check GitHub Actions logs for detailed errors
          2. Verify AWS ECS service status in console
          3. Check CloudWatch logs: `/ecs/breiq-production`
          4. Verify database connectivity and migration status
          
          🔗 **Action Required:**
          Please check the GitHub Actions logs for details:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ⏰ Failed at: $(date)